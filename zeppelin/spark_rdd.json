{"paragraphs":[{"text":"%pyspark\n# Importieren der benötigten Bibliotheken\nfrom pyspark import SparkContext\nfrom pyspark.sql import SparkSession\nimport re\nimport operator\n\n# Initialisieren der SparkSession\nspark = SparkSession.builder.appName(\"WordCountRDD\").getOrCreate()\nsc = spark.sparkContext","user":"anonymous","dateUpdated":"2024-10-15T19:53:28+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1729021999426_-1301403422","id":"paragraph_1685577600000_1234567890","dateCreated":"2024-10-15T19:53:19+0000","dateStarted":"2024-10-15T19:53:28+0000","dateFinished":"2024-10-15T19:53:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12457"},{"text":"%pyspark\n### Erstellen eines Basis-RDD\n# Wir beginnen mit der Erzeugung eines Basis-RDDs mit Hilfe einer Python-Liste und der Methode „sc.parallelize“.  Dann geben wir den Typ des Basis-RDDs aus.\nwordsList = ['cat', 'elephant', 'rat', 'rat', 'cat']\nwordsRDD = sc.parallelize(wordsList, 4)\n# Print out the type of wordsRDD\nprint(type(wordsRDD))","user":"anonymous","dateUpdated":"2024-10-15T20:19:55+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<class 'pyspark.rdd.RDD'>\n"}]},"apps":[],"jobName":"paragraph_1729021999427_-1301788171","id":"paragraph_1685577600001_1234567891","dateCreated":"2024-10-15T19:53:19+0000","dateStarted":"2024-10-15T19:53:32+0000","dateFinished":"2024-10-15T19:53:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12458"},{"text":"%md\nWir erstellen eine Funktion, die an jedes word ein \"s\" anhängt.\n","user":"anonymous","dateUpdated":"2024-10-15T20:48:30+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1729025105510_-1982962887","id":"20241015-204505_1676680862","dateCreated":"2024-10-15T20:45:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12459","dateFinished":"2024-10-15T20:46:43+0000","dateStarted":"2024-10-15T20:46:43+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Verwenden wir eine <a href=\"https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.RDD.map.html\">map</a>-Transformation, um den Buchstaben „s“ zu jeder Zeichenkette in dem gerade erstellten Basis-RDD hinzuzufügen. Wir werden eine Python-Funktion definieren, die das Wort mit einem „s“ am Ende des Wortes zurückgibt.<br/>Bitte ersetzen Sie <code>&lt;FILL IN&gt;</code> durch Ihre Lösung.</p>\n</div>"}]}},{"text":"%pyspark\n\n\ndef makePlural(word):\n    \"\"\"Adds an 's' to `word`.\n\n    Args:\n        word (str): A string.\n\n    Returns:\n        str: A string with 's' added to it.\n    \"\"\"\n    return <FILL IN>\n\nprint(makePlural('cat'))","user":"anonymous","dateUpdated":"2024-10-15T20:45:15+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"cats\n"}]},"apps":[],"jobName":"paragraph_1729021999427_-1301788171","id":"paragraph_1685577600002_1234567892","dateCreated":"2024-10-15T19:53:19+0000","dateStarted":"2024-10-15T19:53:35+0000","dateFinished":"2024-10-15T19:53:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12460"},{"text":"%md\nVerwenden wir eine [map](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.RDD.map.html)-Transformation, um den Buchstaben „s“ zu jeder Zeichenkette in dem gerade erstellten Basis-RDD hinzuzufügen. Wir werden eine Python-Funktion definieren, die das Wort mit einem „s“ am Ende des Wortes zurückgibt. \nBitte ersetzen Sie `<FILL IN>` durch Ihre Lösung. ","user":"anonymous","dateUpdated":"2024-10-15T20:47:36+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1729025215211_2076338868","id":"20241015-204655_611992674","dateCreated":"2024-10-15T20:46:55+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13004"},{"text":"%pyspark\n# Anwendung von „makePlural“ auf das Basis-RDD\n\npluralRDD = wordsRDD.map(<FILL IN>)\nprint(pluralRDD.collect())","user":"anonymous","dateUpdated":"2024-10-15T20:22:21+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"['cats', 'elephants', 'rats', 'rats', 'cats']\n"}]},"apps":[],"jobName":"paragraph_1729021999427_-1301788171","id":"paragraph_1685577600003_1234567893","dateCreated":"2024-10-15T19:53:19+0000","dateStarted":"2024-10-15T19:53:40+0000","dateFinished":"2024-10-15T19:53:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:12461"},{"text":"%md\nWir verwenden eine [Lambda](https://www.w3schools.com/python/python_lambda.asp) Funktion in Python","user":"anonymous","dateUpdated":"2024-10-15T20:52:04+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1729025310443_1405038525","id":"20241015-204830_708655691","dateCreated":"2024-10-15T20:48:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13069","dateFinished":"2024-10-15T20:52:04+0000","dateStarted":"2024-10-15T20:52:04+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Wir verwenden eine <a href=\"https://www.w3schools.com/python/python_lambda.asp\">Lambda</a> Funktion in Python</p>\n</div>"}]}},{"text":"%pyspark\n# Anwendung einer Lambda Funktion\npluralLambdaRDD = wordsRDD.map(lambda <FILL IN>)\nprint pluralLambdaRDD.collect()","user":"anonymous","dateUpdated":"2024-10-15T20:23:18+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-5313774811131740011.py\", line 344, in <module>\n    code = compile('\\n'.join(final_code), '<stdin>', 'exec', ast.PyCF_ONLY_AST, 1)\n  File \"<stdin>\", line 1\n    pluralLambdaRDD = wordsRDD.map(lambda <FILL IN>)\n                                          ^\nSyntaxError: invalid syntax\n"}]},"apps":[],"jobName":"paragraph_1729022020024_-493953398","id":"20241015-195340_346003456","dateCreated":"2024-10-15T19:53:40+0000","dateStarted":"2024-10-15T20:17:04+0000","dateFinished":"2024-10-15T20:17:04+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:12462"},{"text":"%pyspark\n# Berechnung der Länge des Wortes\n#Verwenden Sie nun „map()“ und eine „Lambda“-Funktion, um die Anzahl der Zeichen in jedem Wort zu ermitteln (Funktion: \"len\").  Wir werden dieses Ergebnis direkt in eine Variable speichern.\n\npluralLengths = (pluralRDD\n                 <FILL IN>\n                 .collect())\nprint pluralLengths","user":"anonymous","dateUpdated":"2024-10-15T20:24:37+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1729023424905_-2119709614","id":"20241015-201704_985245434","dateCreated":"2024-10-15T20:17:04+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:12463"},{"text":"%pyspark","user":"anonymous","dateUpdated":"2024-10-15T20:25:23+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1729023489703_277150151","id":"20241015-201809_751868252","dateCreated":"2024-10-15T20:18:09+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:12464"}],"name":"cs110_lab3a_word_count_rdd","id":"2K9ACVGTV","angularObjects":{"2KCA5G25Q:shared_process":[],"2K9M3SKXU:shared_process":[],"2KD3MRPDX:shared_process":[],"2KAMKE5ZS:shared_process":[],"2KAP1S8NP:shared_process":[],"2KD6UQS35:shared_process":[],"2KB87KWWX:shared_process":[],"2KCY7CBF2:shared_process":[],"2KA7X2ZGV:shared_process":[],"2KBGS22RQ:shared_process":[],"2K9Y4A9CT:shared_process":[],"2KCNNRT6V:shared_process":[],"2KB5RY3YW:shared_process":[],"2K9DW1RP1:shared_process":[],"2K9NTFYRA:shared_process":[],"2KCEVT4H5:shared_process":[],"2KBXDHHFZ:shared_process":[],"2K9K6NQN7:shared_process":[],"2KAUSZWYD:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}